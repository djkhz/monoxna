#summary Use this page has a sandbox for informations about XACT related file formats and how to implement sound playback from these files in Mono.Xna

= XACT files format =

XACT is Microsoft Cross-Platform Audio Creation Tool. It's a GUI tool to assemble sounds, wave, effect etc... in a project and specify some informations about it like volume, when to trigger the sounds, how to store them etc...

It accepts 3 sounds formats :
  * WAV : should be simple to playback with the new System.Media namespace which is implemented in Mono 1.2.4
  * XMA, a special format based on WMA : I think this will be the hardest to use. SDLMIxer doesn't support this neither FFMpeg (unless it's still readable as WMA).
  * AIFF : seems to be a standard format (http://en.wikipedia.org/wiki/AIFF). Looks like some sort of MIDI container ?

==> I think it's also important to support other sounds format than these. If use FFMpeg (described below) we could load pretty much anything. There would be also some additions on the .xap file format but nothing that would break compatibility.

http://msdn2.microsoft.com/en-us/library/bb172317.aspx 

XACT .xap file format is described here : http://msdn2.microsoft.com/en-us/library/bb174774.aspx

The .xap files are processed at compile-time by the Content Pipeline to xwb, xsb and xgs files (XACT Wave Bank, XACT Sound Bank, XACT General Settings). Ideally we could write up the same kind of editor with the possibilities to use any sound format.

= XACT API ==

XACT is also an API integrated in DirectSound to manage these file formats both with a high-level and low-level wrapper.

http://msdn2.microsoft.com/en-us/library/bb172328.aspx

I think Microsoft.Xna uses this native API internally as they did with the XBOX Gamepad (using xinput). Then it wouldn't be of too much hassle to do like this on Windows but what about other systems ?

Should we use native call on Windows and somehow make a managed implementation on other systems ? Do like Mono's libgdiplus library, i.e. with write our own native version of xact so that on Windows Mono.Xna uses MS's Xact and on other systems it uses our own (~~could take a look at Wine DirectSound implementation and maybe reuse it~~ apparently there is no implementation of XACT in Wine yet) ?

If we use the managed way, the XACT file parser etc... would be written in managed code and the playback would be assured ~~using either System.Media or P/Invoke into ffmpeg (or other) (maybe make a Tao.FFMpeg ?).~~ using OpenAL for the rendering and FFMpeg (would need a Tao.FFMpeg ?) to retrieve the bare pcm data. The same API would be used if we use the wrapper way but would be implemented as a XACT API.

I found a P/Invoke libray and a small audio player sample which use OpenAL for rendering, it's seem to be perfect for what I want to do but I'm unsure of the licence so I will mail the developper about it. -> http://sourceforge.net/projects/sharpffmpeg/

Antti (Sandriman) also raised concern about the problems Mono.Xna might face on patents by using ffmpeg (or any other thing which can play wma ...). Personally I think there is no problem since most Linux distrib use a stripped down version of ffmpeg to remove things like wma (and mp3 at most), so if we can't load the file beacause there is no codec then we won't play it but IMO users shouldn't be limited. Same thing for the xsb and xwb file format, can we make an encoder for these in the content pipeline ?

=Content of XACT related files=

==.XWB files, Xact Wave Bank ==

The file consist of a header of variable size with the four letter WBND at the beginning. Then  the data content of each wave file is put after this header without any separation.

Each value in the xwb's header seems separated with a combination of 3 zero bytes (\0). The header contains the name of the Wave bank but I'm still unsure of the other values.

So far the header is like this :
5 bytes: the word "WBND)"
separator
0x30
separator
0x60
separator
0x90
separator
a number
separator
a number : start of the first WAV data
separator
separator
separator
separator
separator
a number : start of the first WAV data too
separator
3 bytes number : size of all wavs data (little-endian)
separator
2 bytes number
separator
37bytes : name of the wave bank
separator
0x18
separator
0x04
separator
0x40
separator
0x00
separator
{{{sub header {
 17 bytes
 separator
 2 bytes: size of the corresponding wave file (little-endian)
 separator
 0x00
 separator
}}}}--> *seems* to be for each wave file in the bank